{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/tauag/Projects/sunbeam/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/tauag/Projects/sunbeam/src/hourly/hourlyforecast.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\twidth: \", \"%;\\n\\theight: 50px;\\n\\tbackground-color: \", \";\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport getWeatherPalette from '../shared/palette';\nimport './hourlyforecast.css';\nvar ForecastHour = styled.span(_templateObject(), function (props) {\n  return props.hours / 12 * 100;\n}, function (props) {\n  return props.color;\n});\n\nfunction generateHourlyForecastBar() {\n  var maxHours = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 12;\n  var data = arguments.length > 1 ? arguments[1] : undefined;\n  var container = arguments.length > 2 ? arguments[2] : undefined;\n  if (data.length < maxHours) throw new Error(\"Cannot generate a \".concat(maxHours, \" forecast bar, data is of length \").concat(data.length));else if (maxHours < 1) {\n    throw new Error('Cannot generate a forecast bar that is less than 1 hour');\n  }\n  var weather = data[0].icon;\n  var weatherSummary = data[0].summary;\n  var weatherCounter = 1;\n\n  for (var i = 1; i < maxHours; i++) {\n    var icon = data[i].icon;\n\n    var _getWeatherPalette = getWeatherPalette(icon),\n        _color = _getWeatherPalette.color;\n\n    if (icon !== weather) {\n      console.log(weather);\n      container.push(React.createElement(ForecastHour, {\n        key: \"hourly-part-\".concat(i),\n        hours: weatherCounter,\n        color: _color,\n        \"aria-label\": weatherSummary,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }));\n      weather = icon;\n      weatherSummary = data[i].summary;\n      weatherCounter = 1;\n    } else {\n      weatherCounter += 1;\n    }\n  }\n\n  var _getWeatherPalette2 = getWeatherPalette(weather),\n      color = _getWeatherPalette2.color;\n\n  container.push(React.createElement(ForecastHour, {\n    key: \"hourly-part-end\",\n    hours: weatherCounter,\n    color: color,\n    \"aria-label\": weatherSummary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }));\n}\n\nexport default function HourlyForecast(props) {\n  var forecastContainer = [];\n  generateHourlyForecastBar(12, props.hourly.data, forecastContainer);\n  return React.createElement(\"div\", {\n    className: \"hourly-forecast-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"hourly-forecast-summary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, props.hourly.summary), React.createElement(\"div\", {\n    className: \"hourly-forecast-bar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, forecastContainer));\n}\nHourlyForecast.propTypes = {\n  hourly: PropTypes.shape({\n    summary: PropTypes.string.isRequired,\n    data: PropTypes.arrayOf(PropTypes.shape({\n      time: PropTypes.number.isRequired,\n      icon: PropTypes.string.isRequired,\n      temperature: PropTypes.number.isRequired\n    }))\n  }).isRequired\n};","map":{"version":3,"sources":["/Users/tauag/Projects/sunbeam/src/hourly/hourlyforecast.js"],"names":["React","PropTypes","styled","getWeatherPalette","ForecastHour","span","props","hours","color","generateHourlyForecastBar","maxHours","data","container","length","Error","weather","icon","weatherSummary","summary","weatherCounter","i","console","log","push","HourlyForecast","forecastContainer","hourly","propTypes","shape","string","isRequired","arrayOf","time","number","temperature"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport getWeatherPalette from '../shared/palette';\nimport './hourlyforecast.css';\n\nconst ForecastHour = styled.span`\n\twidth: ${props => (props.hours / 12) * 100}%;\n\theight: 50px;\n\tbackground-color: ${props => props.color};\n`;\n\nfunction generateHourlyForecastBar(maxHours = 12, data, container) {\n\tif (data.length < maxHours)\n\t\tthrow new Error(\n\t\t\t`Cannot generate a ${maxHours} forecast bar, data is of length ${\n\t\t\t\tdata.length\n\t\t\t}`\n\t\t);\n\telse if (maxHours < 1) {\n\t\tthrow new Error('Cannot generate a forecast bar that is less than 1 hour');\n\t}\n\n\tvar weather = data[0].icon;\n\tvar weatherSummary = data[0].summary;\n\tvar weatherCounter = 1;\n\n\tfor (let i = 1; i < maxHours; i++) {\n\t\tlet icon = data[i].icon;\n\t\tconst { color } = getWeatherPalette(icon);\n\t\tif (icon !== weather) {\n\t\t\tconsole.log(weather);\n\t\t\tcontainer.push(\n\t\t\t\t<ForecastHour\n\t\t\t\t\tkey={`hourly-part-${i}`}\n\t\t\t\t\thours={weatherCounter}\n\t\t\t\t\tcolor={color}\n\t\t\t\t\taria-label={weatherSummary}\n\t\t\t\t/>\n\t\t\t);\n\n\t\t\tweather = icon;\n\t\t\tweatherSummary = data[i].summary;\n\t\t\tweatherCounter = 1;\n\t\t} else {\n\t\t\tweatherCounter += 1;\n\t\t}\n\t}\n\n\tconst { color } = getWeatherPalette(weather);\n\tcontainer.push(\n\t\t<ForecastHour\n\t\t\tkey=\"hourly-part-end\"\n\t\t\thours={weatherCounter}\n\t\t\tcolor={color}\n\t\t\taria-label={weatherSummary}\n\t\t/>\n\t);\n}\n\nexport default function HourlyForecast(props) {\n\tconst forecastContainer = [];\n\tgenerateHourlyForecastBar(12, props.hourly.data, forecastContainer);\n\n\treturn (\n\t\t<div className=\"hourly-forecast-wrapper\">\n\t\t\t<span className=\"hourly-forecast-summary\">{props.hourly.summary}</span>\n\t\t\t<div className=\"hourly-forecast-bar\">{forecastContainer}</div>\n\t\t</div>\n\t);\n}\n\nHourlyForecast.propTypes = {\n\thourly: PropTypes.shape({\n\t\tsummary: PropTypes.string.isRequired,\n\t\tdata: PropTypes.arrayOf(\n\t\t\tPropTypes.shape({\n\t\t\t\ttime: PropTypes.number.isRequired,\n\t\t\t\ticon: PropTypes.string.isRequired,\n\t\t\t\ttemperature: PropTypes.number.isRequired\n\t\t\t})\n\t\t)\n\t}).isRequired\n};\n"]},"metadata":{},"sourceType":"module"}