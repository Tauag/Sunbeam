{"ast":null,"code":"import _slicedToArray from \"/Users/tauag/Projects/sunbeam/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tauag/Projects/sunbeam/src/display/weatherview.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nexport default function WeatherView(props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  function handleDarkSkyCall(lat, lng) {\n    return new Promise(function (resolve, reject) {\n      axios.get(\"https://api.darksky.net/forecast/\".concat(REACT_APP_DARKSKYKEY, \"/\").concat(lat, \",\").concat(lng)).then(function (response) {\n        var data = response.data;\n        setData({\n          data: data\n        }, function () {\n          resolve();\n        });\n      }, function (error) {\n        props.onError('darksky', error);\n        reject();\n      });\n    });\n  }\n\n  function convertUnixToDate(unixTime) {\n    var date = new Date(unixTime * 1000);\n    return date.toLocaleDateString();\n  }\n\n  useEffect(function () {\n    handleDarkSkyCall(props.lat, props.lng);\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Currently it is \".concat(convertUnixToDate(data.currently.time))), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"The temperature is \".concat(data.currently.temperature)));\n}","map":{"version":3,"sources":["/Users/tauag/Projects/sunbeam/src/display/weatherview.js"],"names":["React","useState","useEffect","PropTypes","axios","WeatherView","props","data","setData","handleDarkSkyCall","lat","lng","Promise","resolve","reject","get","REACT_APP_DARKSKYKEY","then","response","error","onError","convertUnixToDate","unixTime","date","Date","toLocaleDateString","currently","time","temperature"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA,kBAClBL,QAAQ,CAAC,EAAD,CADU;AAAA;AAAA,MACnCM,IADmC;AAAA,MAC7BC,OAD6B;;AAG1C,WAASC,iBAAT,CAA2BC,GAA3B,EAAgCC,GAAhC,EAAqC;AACpC,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvCV,MAAAA,KAAK,CACHW,GADF,4CAEsCC,oBAFtC,cAE8DN,GAF9D,cAEqEC,GAFrE,GAIEM,IAJF,CAKE,UAAAC,QAAQ,EAAI;AACX,YAAMX,IAAI,GAAGW,QAAQ,CAACX,IAAtB;AACAC,QAAAA,OAAO,CAAC;AAAED,UAAAA,IAAI,EAAJA;AAAF,SAAD,EAAW,YAAM;AACvBM,UAAAA,OAAO;AACP,SAFM,CAAP;AAGA,OAVH,EAWE,UAAAM,KAAK,EAAI;AACRb,QAAAA,KAAK,CAACc,OAAN,CAAc,SAAd,EAAyBD,KAAzB;AACAL,QAAAA,MAAM;AACN,OAdH;AAgBA,KAjBM,CAAP;AAkBA;;AAED,WAASO,iBAAT,CAA2BC,QAA3B,EAAqC;AACpC,QAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASF,QAAQ,GAAG,IAApB,CAAb;AACA,WAAOC,IAAI,CAACE,kBAAL,EAAP;AACA;;AAEDvB,EAAAA,SAAS,CAAC,YAAM;AACfO,IAAAA,iBAAiB,CAACH,KAAK,CAACI,GAAP,EAAYJ,KAAK,CAACK,GAAlB,CAAjB;AACA,GAFQ,CAAT;AAIA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA0BU,iBAAiB,CAACd,IAAI,CAACmB,SAAL,CAAeC,IAAhB,CAA3C,EADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAA6BpB,IAAI,CAACmB,SAAL,CAAeE,WAA5C,EAFD,CADD;AAMA","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nexport default function WeatherView(props) {\n\tconst [data, setData] = useState({});\n\n\tfunction handleDarkSkyCall(lat, lng) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\taxios\n\t\t\t\t.get(\n\t\t\t\t\t`https://api.darksky.net/forecast/${REACT_APP_DARKSKYKEY}/${lat},${lng}`\n\t\t\t\t)\n\t\t\t\t.then(\n\t\t\t\t\tresponse => {\n\t\t\t\t\t\tconst data = response.data;\n\t\t\t\t\t\tsetData({ data }, () => {\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\tprops.onError('darksky', error);\n\t\t\t\t\t\treject();\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t});\n\t}\n\n\tfunction convertUnixToDate(unixTime) {\n\t\tconst date = new Date(unixTime * 1000);\n\t\treturn date.toLocaleDateString();\n\t}\n\n\tuseEffect(() => {\n\t\thandleDarkSkyCall(props.lat, props.lng);\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t<span>{`Currently it is ${convertUnixToDate(data.currently.time)}`}</span>\n\t\t\t<span>{`The temperature is ${data.currently.temperature}`}</span>\n\t\t</div>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}