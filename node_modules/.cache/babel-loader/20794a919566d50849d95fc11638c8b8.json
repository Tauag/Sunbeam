{"ast":null,"code":"var _jsxFileName = \"/Users/tauag/Projects/sunbeam/src/display/weatherview.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nexport default function WeatherView(props) {\n  var data = props.data;\n\n  function convertUnixToDate(unixTime) {\n    var date = new Date(unixTime * 1000);\n    return date.toLocaleDateString();\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"Currently it is \".concat(convertUnixToDate(data.currently.time))), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"The temperature is \".concat(data.currently.temperature)));\n}","map":{"version":3,"sources":["/Users/tauag/Projects/sunbeam/src/display/weatherview.js"],"names":["React","useState","useEffect","PropTypes","axios","WeatherView","props","data","convertUnixToDate","unixTime","date","Date","toLocaleDateString","currently","time","temperature"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1C,MAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;;AAEA,WAASC,iBAAT,CAA2BC,QAA3B,EAAqC;AACpC,QAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASF,QAAQ,GAAG,IAApB,CAAb;AACA,WAAOC,IAAI,CAACE,kBAAL,EAAP;AACA;;AAED,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA0BJ,iBAAiB,CAACD,IAAI,CAACM,SAAL,CAAeC,IAAhB,CAA3C,EADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAA6BP,IAAI,CAACM,SAAL,CAAeE,WAA5C,EAFD,CADD;AAMA","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nexport default function WeatherView(props) {\n\tconst data = props.data;\n\n\tfunction convertUnixToDate(unixTime) {\n\t\tconst date = new Date(unixTime * 1000);\n\t\treturn date.toLocaleDateString();\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<span>{`Currently it is ${convertUnixToDate(data.currently.time)}`}</span>\n\t\t\t<span>{`The temperature is ${data.currently.temperature}`}</span>\n\t\t</div>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}