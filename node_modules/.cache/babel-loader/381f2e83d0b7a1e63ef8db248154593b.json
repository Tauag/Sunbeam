{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/tauag/Projects/sunbeam/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/tauag/Projects/sunbeam/src/hourly/hourlyforecast.js\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n\\t\", \"\\n\\t\", \"\\n\\t\", \"\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n\\twidth: \", \"%;\\n\\theight: 100%;\\n\\tmargin-left: \", \"%;\\n\\tbackground-color: none;\\n\\tborder-left: #7f7f81 1px solid;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\twidth: \", \"%;\\n\\theight: 50px;\\n\\tbackground-color: \", \";\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport getWeatherPalette from '../shared/palette';\nimport './hourlyforecast.css';\nvar ForecastHour = styled.span(_templateObject(), function (props) {\n  return props.hours / props.maxHours * 100;\n}, function (props) {\n  return props.color;\n});\nvar ForecastTicks = styled.span(_templateObject2(), function (props) {\n  return 1 / props.maxHours * 100;\n}, function (props) {\n  return 1 / (props.maxHours * 2) * 100;\n});\nvar ForecastIcon = styled.img(_templateObject3(), ''\n/* height: 100%; */\n, ''\n/* margin: auto; */\n, ''\n/* color: ${props => props.color} @media screen and (max-width: 768px) {\ndisplay: none;\n} */\n);\n\nfunction generateHourlyForecastBar(data) {\n  var maxHours = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n  if (data.length < maxHours) throw new Error(\"Cannot generate a \".concat(maxHours, \" forecast bar, data is of length \").concat(data.length));else if (maxHours < 1) {\n    throw new Error('Cannot generate a forecast bar that is less than 1 hour');\n  }\n  var container = [];\n  var weatherIcon = data[0].icon;\n  var weatherSummary = data[0].summary;\n  var weatherCounter = 1;\n\n  for (var i = 1; i < maxHours; i++) {\n    var icon = data[i].icon;\n\n    var _getWeatherPalette = getWeatherPalette(weatherIcon),\n        _color = _getWeatherPalette.color,\n        _weather = _getWeatherPalette.weather,\n        _weatherMsg = _getWeatherPalette.weatherMsg;\n\n    if (icon !== weatherIcon) {\n      container.push(React.createElement(ForecastHour, {\n        key: \"hourly-part-\".concat(i),\n        hours: weatherCounter,\n        maxHours: maxHours,\n        color: _color,\n        \"aria-label\": weatherSummary,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(ForecastIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(ForecastIcon, {\n        src: _weather,\n        alt: _weatherMsg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }))));\n      weatherIcon = icon;\n      weatherSummary = data[i].summary;\n      weatherCounter = 1;\n    } else {\n      weatherCounter += 1;\n    }\n  }\n\n  var _getWeatherPalette2 = getWeatherPalette(weatherIcon),\n      color = _getWeatherPalette2.color,\n      weather = _getWeatherPalette2.weather,\n      weatherMsg = _getWeatherPalette2.weatherMsg;\n\n  container.push(React.createElement(ForecastHour, {\n    key: \"hourly-part-\".concat(maxHours),\n    hours: weatherCounter,\n    maxHours: maxHours,\n    color: color,\n    \"aria-label\": weatherSummary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(ForecastIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(ForecastIcon, {\n    src: weather,\n    alt: weatherMsg,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }))));\n  return container;\n}\n\nfunction generateHourlyTickMarks() {\n  var maxHours = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 12;\n  var container = [];\n\n  for (var i = 0; i < maxHours; i++) {\n    container.push(React.createElement(ForecastTicks, {\n      maxHours: maxHours,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }));\n  }\n\n  return container;\n}\n\nexport default function HourlyForecast(props) {\n  var forecastContainer = generateHourlyForecastBar(props.hourly.data);\n  var forecastTickMarks = generateHourlyTickMarks();\n  return React.createElement(\"div\", {\n    className: \"hourly-forecast-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"hourly-forecast-summary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, props.hourly.summary), React.createElement(\"div\", {\n    className: \"hourly-forecast-bar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, forecastContainer), React.createElement(\"div\", {\n    className: \"hourly-forecast-tickmarks\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, forecastTickMarks));\n}\nHourlyForecast.propTypes = {\n  hourly: PropTypes.shape({\n    summary: PropTypes.string.isRequired,\n    data: PropTypes.arrayOf(PropTypes.shape({\n      time: PropTypes.number.isRequired,\n      icon: PropTypes.string.isRequired,\n      temperature: PropTypes.number.isRequired\n    }))\n  }).isRequired\n};","map":{"version":3,"sources":["/Users/tauag/Projects/sunbeam/src/hourly/hourlyforecast.js"],"names":["React","PropTypes","styled","getWeatherPalette","ForecastHour","span","props","hours","maxHours","color","ForecastTicks","ForecastIcon","img","generateHourlyForecastBar","data","length","Error","container","weatherIcon","icon","weatherSummary","summary","weatherCounter","i","weather","weatherMsg","push","generateHourlyTickMarks","HourlyForecast","forecastContainer","hourly","forecastTickMarks","propTypes","shape","string","isRequired","arrayOf","time","number","temperature"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport getWeatherPalette from '../shared/palette';\nimport './hourlyforecast.css';\n\nconst ForecastHour = styled.span`\n\twidth: ${props => (props.hours / props.maxHours) * 100}%;\n\theight: 50px;\n\tbackground-color: ${props => props.color};\n`;\n\nconst ForecastTicks = styled.span`\n\twidth: ${props => (1 / props.maxHours) * 100}%;\n\theight: 100%;\n\tmargin-left: ${props => (1 / (props.maxHours * 2)) * 100}%;\n\tbackground-color: none;\n\tborder-left: #7f7f81 1px solid;\n`;\n\nconst ForecastIcon = styled.img`\n\t${'' /* height: 100%; */}\n\t${'' /* margin: auto; */}\n\t${\n\t\t'' /* color: ${props => props.color} @media screen and (max-width: 768px) {\n\t\tdisplay: none;\n\t} */\n\t}\n`;\n\nfunction generateHourlyForecastBar(data, maxHours = 12) {\n\tif (data.length < maxHours)\n\t\tthrow new Error(\n\t\t\t`Cannot generate a ${maxHours} forecast bar, data is of length ${\n\t\t\t\tdata.length\n\t\t\t}`\n\t\t);\n\telse if (maxHours < 1) {\n\t\tthrow new Error('Cannot generate a forecast bar that is less than 1 hour');\n\t}\n\n\tconst container = [];\n\tvar weatherIcon = data[0].icon;\n\tvar weatherSummary = data[0].summary;\n\tvar weatherCounter = 1;\n\n\tfor (let i = 1; i < maxHours; i++) {\n\t\tlet icon = data[i].icon;\n\t\tlet { color, weather, weatherMsg } = getWeatherPalette(weatherIcon);\n\t\tif (icon !== weatherIcon) {\n\t\t\tcontainer.push(\n\t\t\t\t<ForecastHour\n\t\t\t\t\tkey={`hourly-part-${i}`}\n\t\t\t\t\thours={weatherCounter}\n\t\t\t\t\tmaxHours={maxHours}\n\t\t\t\t\tcolor={color}\n\t\t\t\t\taria-label={weatherSummary}\n\t\t\t\t>\n\t\t\t\t\t<ForecastIcon>\n\t\t\t\t\t\t<ForecastIcon src={weather} alt={weatherMsg} />\n\t\t\t\t\t</ForecastIcon>\n\t\t\t\t</ForecastHour>\n\t\t\t);\n\n\t\t\tweatherIcon = icon;\n\t\t\tweatherSummary = data[i].summary;\n\t\t\tweatherCounter = 1;\n\t\t} else {\n\t\t\tweatherCounter += 1;\n\t\t}\n\t}\n\n\tlet { color, weather, weatherMsg } = getWeatherPalette(weatherIcon);\n\tcontainer.push(\n\t\t<ForecastHour\n\t\t\tkey={`hourly-part-${maxHours}`}\n\t\t\thours={weatherCounter}\n\t\t\tmaxHours={maxHours}\n\t\t\tcolor={color}\n\t\t\taria-label={weatherSummary}\n\t\t>\n\t\t\t<ForecastIcon>\n\t\t\t\t<ForecastIcon src={weather} alt={weatherMsg} />\n\t\t\t</ForecastIcon>\n\t\t</ForecastHour>\n\t);\n\n\treturn container;\n}\n\nfunction generateHourlyTickMarks(maxHours = 12) {\n\tconst container = [];\n\tfor (let i = 0; i < maxHours; i++) {\n\t\tcontainer.push(<ForecastTicks maxHours={maxHours} />);\n\t}\n\n\treturn container;\n}\n\nexport default function HourlyForecast(props) {\n\tconst forecastContainer = generateHourlyForecastBar(props.hourly.data);\n\tconst forecastTickMarks = generateHourlyTickMarks();\n\n\treturn (\n\t\t<div className=\"hourly-forecast-wrapper\">\n\t\t\t<span className=\"hourly-forecast-summary\">{props.hourly.summary}</span>\n\t\t\t<div className=\"hourly-forecast-bar\">{forecastContainer}</div>\n\t\t\t<div className=\"hourly-forecast-tickmarks\">{forecastTickMarks}</div>\n\t\t</div>\n\t);\n}\n\nHourlyForecast.propTypes = {\n\thourly: PropTypes.shape({\n\t\tsummary: PropTypes.string.isRequired,\n\t\tdata: PropTypes.arrayOf(\n\t\t\tPropTypes.shape({\n\t\t\t\ttime: PropTypes.number.isRequired,\n\t\t\t\ticon: PropTypes.string.isRequired,\n\t\t\t\ttemperature: PropTypes.number.isRequired\n\t\t\t})\n\t\t)\n\t}).isRequired\n};\n"]},"metadata":{},"sourceType":"module"}