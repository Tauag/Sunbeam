{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/tauag/Projects/sunbeam/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/tauag/Projects/sunbeam/src/hourly/hourlyforecast.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n\\twidth: \", \"%;\\n\\theight: 5px;\\n\\tbackground-color: none;\\n\\tborder-left: #e0e0e0 1px solid;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\twidth: \", \"%;\\n\\theight: 50px;\\n\\tbackground-color: \", \";\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport getWeatherPalette from '../shared/palette';\nimport './hourlyforecast.css';\nvar ForecastHour = styled.span(_templateObject(), function (props) {\n  return props.hours / props.maxHours * 100;\n}, function (props) {\n  return props.color;\n});\nvar ForecastTicks = styled.span(_templateObject2(), function (props) {\n  return 1 / props.maxHours * 100;\n});\n\nfunction generateHourlyForecastBar(data) {\n  var maxHours = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n  if (data.length < maxHours) throw new Error(\"Cannot generate a \".concat(maxHours, \" forecast bar, data is of length \").concat(data.length));else if (maxHours < 1) {\n    throw new Error('Cannot generate a forecast bar that is less than 1 hour');\n  }\n  var container = [];\n  var weather = data[0].icon;\n  var weatherSummary = data[0].summary;\n  var weatherCounter = 1;\n\n  for (var i = 1; i < maxHours; i++) {\n    var icon = data[i].icon;\n\n    var _getWeatherPalette = getWeatherPalette(weather),\n        _color = _getWeatherPalette.color;\n\n    if (icon !== weather) {\n      container.push(React.createElement(ForecastHour, {\n        key: \"hourly-part-\".concat(i),\n        hours: weatherCounter,\n        maxHours: maxHours,\n        color: _color,\n        \"aria-label\": weatherSummary,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }));\n      weather = icon;\n      weatherSummary = data[i].summary;\n      weatherCounter = 1;\n    } else {\n      weatherCounter += 1;\n    }\n  }\n\n  var _getWeatherPalette2 = getWeatherPalette(weather),\n      color = _getWeatherPalette2.color;\n\n  container.push(React.createElement(ForecastHour, {\n    key: \"hourly-part-\".concat(maxHours),\n    hours: weatherCounter,\n    color: color,\n    \"aria-label\": weatherSummary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }));\n  return container;\n}\n\nfunction generateHourlyTickMarks() {\n  var maxHours = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 12;\n  var container = [];\n\n  for (var i = 0; i < maxHours; i++) {\n    container.push(React.createElement(ForecastTicks, {\n      maxHours: maxHours,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }));\n  }\n}\n\nexport default function HourlyForecast(props) {\n  var forecastContainer = generateHourlyForecastBar(12, props.hourly.data);\n  var forecastTickMarks = generateHourlyTickMarks();\n  return React.createElement(\"div\", {\n    className: \"hourly-forecast-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"hourly-forecast-summary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, props.hourly.summary), React.createElement(\"div\", {\n    className: \"hourly-forecast-bar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, forecastContainer), React.createElement(\"div\", {\n    className: \"hourly-forecast-tickmarks\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }));\n}\nHourlyForecast.propTypes = {\n  hourly: PropTypes.shape({\n    summary: PropTypes.string.isRequired,\n    data: PropTypes.arrayOf(PropTypes.shape({\n      time: PropTypes.number.isRequired,\n      icon: PropTypes.string.isRequired,\n      temperature: PropTypes.number.isRequired\n    }))\n  }).isRequired\n};","map":{"version":3,"sources":["/Users/tauag/Projects/sunbeam/src/hourly/hourlyforecast.js"],"names":["React","PropTypes","styled","getWeatherPalette","ForecastHour","span","props","hours","maxHours","color","ForecastTicks","generateHourlyForecastBar","data","length","Error","container","weather","icon","weatherSummary","summary","weatherCounter","i","push","generateHourlyTickMarks","HourlyForecast","forecastContainer","hourly","forecastTickMarks","propTypes","shape","string","isRequired","arrayOf","time","number","temperature"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport getWeatherPalette from '../shared/palette';\nimport './hourlyforecast.css';\n\nconst ForecastHour = styled.span`\n\twidth: ${props => (props.hours / props.maxHours) * 100}%;\n\theight: 50px;\n\tbackground-color: ${props => props.color};\n`;\n\nconst ForecastTicks = styled.span`\n\twidth: ${props => (1 / props.maxHours) * 100}%;\n\theight: 5px;\n\tbackground-color: none;\n\tborder-left: #e0e0e0 1px solid;\n`;\n\nfunction generateHourlyForecastBar(data, maxHours = 12) {\n\tif (data.length < maxHours)\n\t\tthrow new Error(\n\t\t\t`Cannot generate a ${maxHours} forecast bar, data is of length ${\n\t\t\t\tdata.length\n\t\t\t}`\n\t\t);\n\telse if (maxHours < 1) {\n\t\tthrow new Error('Cannot generate a forecast bar that is less than 1 hour');\n\t}\n\n\tconst container = [];\n\tvar weather = data[0].icon;\n\tvar weatherSummary = data[0].summary;\n\tvar weatherCounter = 1;\n\n\tfor (let i = 1; i < maxHours; i++) {\n\t\tlet icon = data[i].icon;\n\t\tlet { color } = getWeatherPalette(weather);\n\t\tif (icon !== weather) {\n\t\t\tcontainer.push(\n\t\t\t\t<ForecastHour\n\t\t\t\t\tkey={`hourly-part-${i}`}\n\t\t\t\t\thours={weatherCounter}\n\t\t\t\t\tmaxHours={maxHours}\n\t\t\t\t\tcolor={color}\n\t\t\t\t\taria-label={weatherSummary}\n\t\t\t\t/>\n\t\t\t);\n\n\t\t\tweather = icon;\n\t\t\tweatherSummary = data[i].summary;\n\t\t\tweatherCounter = 1;\n\t\t} else {\n\t\t\tweatherCounter += 1;\n\t\t}\n\t}\n\n\tlet { color } = getWeatherPalette(weather);\n\tcontainer.push(\n\t\t<ForecastHour\n\t\t\tkey={`hourly-part-${maxHours}`}\n\t\t\thours={weatherCounter}\n\t\t\tcolor={color}\n\t\t\taria-label={weatherSummary}\n\t\t/>\n\t);\n\n\treturn container;\n}\n\nfunction generateHourlyTickMarks(maxHours = 12) {\n\tconst container = [];\n\n\tfor (let i = 0; i < maxHours; i++) {\n\t\tcontainer.push(<ForecastTicks maxHours={maxHours} />);\n\t}\n}\n\nexport default function HourlyForecast(props) {\n\tconst forecastContainer = generateHourlyForecastBar(12, props.hourly.data);\n\tconst forecastTickMarks = generateHourlyTickMarks();\n\n\treturn (\n\t\t<div className=\"hourly-forecast-wrapper\">\n\t\t\t<span className=\"hourly-forecast-summary\">{props.hourly.summary}</span>\n\t\t\t<div className=\"hourly-forecast-bar\">{forecastContainer}</div>\n\t\t\t<div className=\"hourly-forecast-tickmarks\">{}</div>\n\t\t</div>\n\t);\n}\n\nHourlyForecast.propTypes = {\n\thourly: PropTypes.shape({\n\t\tsummary: PropTypes.string.isRequired,\n\t\tdata: PropTypes.arrayOf(\n\t\t\tPropTypes.shape({\n\t\t\t\ttime: PropTypes.number.isRequired,\n\t\t\t\ticon: PropTypes.string.isRequired,\n\t\t\t\ttemperature: PropTypes.number.isRequired\n\t\t\t})\n\t\t)\n\t}).isRequired\n};\n"]},"metadata":{},"sourceType":"module"}