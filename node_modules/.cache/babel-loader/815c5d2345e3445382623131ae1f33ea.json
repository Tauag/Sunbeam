{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/tauag/Projects/sunbeam/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/tauag/Projects/sunbeam/src/hourly/hourlyforecast.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\twidth: \", \"%;\\n\\theight: 15px;\\n\\tcolor: \", \";\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport getWeatherPalette from '../shared/palette';\nimport './hourlyforecast.css';\nvar ForecastHour = styled.span(_templateObject(), function (props) {\n  return props.hours / 12 * 100;\n}, function (props) {\n  return props.color;\n});\n\nfunction generateHourlyForecastBar() {\n  var maxHours = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 12;\n  var data = arguments.length > 1 ? arguments[1] : undefined;\n  var container = arguments.length > 2 ? arguments[2] : undefined;\n  if (data.length < maxHours) throw new Error(\"Cannot generate a \".concat(maxHours, \" forecast bar, data is of length \").concat(data.length));else if (maxHours < 1) {\n    throw new Error('Cannot generate a forecast bar that is less than 1 hour');\n  }\n  var weather = data[0].icon;\n  var weatherCounter = 1;\n\n  for (var i = 1; i < maxHours; i++) {\n    var icon = data[i].icon;\n\n    var _getWeatherPalette = getWeatherPalette(icon),\n        color = _getWeatherPalette.color;\n\n    if (icon !== weather) {\n      container.push(React.createElement(ForecastHour, {\n        key: \"hourly-part-\".concat(i),\n        hours: weatherCounter,\n        color: color,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }));\n    }\n  }\n}\n\nexport default function HourlyForecast(props) {\n  var forecastContainer = [];\n  generateHourlyForecastBar(12, props.hourly.data, forecastContainer);\n  return React.createElement(\"div\", {\n    className: \"hourly-forecast-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"hourly-forecast-summary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, props.hourly.summary), React.createElement(\"div\", {\n    className: \"hourly-forecast-bar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, forecastContainer));\n}\nHourlyForecast.propTypes = {\n  hourly: PropTypes.shape({\n    summary: PropTypes.string.isRequired,\n    data: PropTypes.arrayOf(PropTypes.shape({\n      time: PropTypes.number.isRequired,\n      icon: PropTypes.string.isRequired,\n      temperature: PropTypes.number.isRequired\n    }))\n  }).isRequired\n};","map":{"version":3,"sources":["/Users/tauag/Projects/sunbeam/src/hourly/hourlyforecast.js"],"names":["React","PropTypes","styled","getWeatherPalette","ForecastHour","span","props","hours","color","generateHourlyForecastBar","maxHours","data","container","length","Error","weather","icon","weatherCounter","i","push","HourlyForecast","forecastContainer","hourly","summary","propTypes","shape","string","isRequired","arrayOf","time","number","temperature"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,iBAAP,MAA8B,mBAA9B;AACA,OAAO,sBAAP;AAEA,IAAMC,YAAY,GAAGF,MAAM,CAACG,IAAV,oBACR,UAAAC,KAAK;AAAA,SAAKA,KAAK,CAACC,KAAN,GAAc,EAAf,GAAqB,GAAzB;AAAA,CADG,EAGR,UAAAD,KAAK;AAAA,SAAIA,KAAK,CAACE,KAAV;AAAA,CAHG,CAAlB;;AAMA,SAASC,yBAAT,GAAmE;AAAA,MAAhCC,QAAgC,uEAArB,EAAqB;AAAA,MAAjBC,IAAiB;AAAA,MAAXC,SAAW;AAClE,MAAID,IAAI,CAACE,MAAL,GAAcH,QAAlB,EACC,MAAM,IAAII,KAAJ,6BACgBJ,QADhB,8CAEJC,IAAI,CAACE,MAFD,EAAN,CADD,KAMK,IAAIH,QAAQ,GAAG,CAAf,EAAkB;AACtB,UAAM,IAAII,KAAJ,CAAU,yDAAV,CAAN;AACA;AAED,MAAIC,OAAO,GAAGJ,IAAI,CAAC,CAAD,CAAJ,CAAQK,IAAtB;AACA,MAAIC,cAAc,GAAG,CAArB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,QAApB,EAA8BQ,CAAC,EAA/B,EAAmC;AAClC,QAAIF,IAAI,GAAGL,IAAI,CAACO,CAAD,CAAJ,CAAQF,IAAnB;;AADkC,6BAEhBb,iBAAiB,CAACa,IAAD,CAFD;AAAA,QAE1BR,KAF0B,sBAE1BA,KAF0B;;AAGlC,QAAIQ,IAAI,KAAKD,OAAb,EAAsB;AACrBH,MAAAA,SAAS,CAACO,IAAV,CACC,oBAAC,YAAD;AACC,QAAA,GAAG,wBAAiBD,CAAjB,CADJ;AAEC,QAAA,KAAK,EAAED,cAFR;AAGC,QAAA,KAAK,EAAET,KAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD;AAOA;AACD;AACD;;AAED,eAAe,SAASY,cAAT,CAAwBd,KAAxB,EAA+B;AAC7C,MAAMe,iBAAiB,GAAG,EAA1B;AACAZ,EAAAA,yBAAyB,CAAC,EAAD,EAAKH,KAAK,CAACgB,MAAN,CAAaX,IAAlB,EAAwBU,iBAAxB,CAAzB;AAEA,SACC;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAM,IAAA,SAAS,EAAC,yBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2Cf,KAAK,CAACgB,MAAN,CAAaC,OAAxD,CADD,EAEC;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsCF,iBAAtC,CAFD,CADD;AAMA;AAEDD,cAAc,CAACI,SAAf,GAA2B;AAC1BF,EAAAA,MAAM,EAAErB,SAAS,CAACwB,KAAV,CAAgB;AACvBF,IAAAA,OAAO,EAAEtB,SAAS,CAACyB,MAAV,CAAiBC,UADH;AAEvBhB,IAAAA,IAAI,EAAEV,SAAS,CAAC2B,OAAV,CACL3B,SAAS,CAACwB,KAAV,CAAgB;AACfI,MAAAA,IAAI,EAAE5B,SAAS,CAAC6B,MAAV,CAAiBH,UADR;AAEfX,MAAAA,IAAI,EAAEf,SAAS,CAACyB,MAAV,CAAiBC,UAFR;AAGfI,MAAAA,WAAW,EAAE9B,SAAS,CAAC6B,MAAV,CAAiBH;AAHf,KAAhB,CADK;AAFiB,GAAhB,EASLA;AAVuB,CAA3B","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport getWeatherPalette from '../shared/palette';\nimport './hourlyforecast.css';\n\nconst ForecastHour = styled.span`\n\twidth: ${props => (props.hours / 12) * 100}%;\n\theight: 15px;\n\tcolor: ${props => props.color};\n`;\n\nfunction generateHourlyForecastBar(maxHours = 12, data, container) {\n\tif (data.length < maxHours)\n\t\tthrow new Error(\n\t\t\t`Cannot generate a ${maxHours} forecast bar, data is of length ${\n\t\t\t\tdata.length\n\t\t\t}`\n\t\t);\n\telse if (maxHours < 1) {\n\t\tthrow new Error('Cannot generate a forecast bar that is less than 1 hour');\n\t}\n\n\tvar weather = data[0].icon;\n\tvar weatherCounter = 1;\n\n\tfor (let i = 1; i < maxHours; i++) {\n\t\tlet icon = data[i].icon;\n\t\tconst { color } = getWeatherPalette(icon);\n\t\tif (icon !== weather) {\n\t\t\tcontainer.push(\n\t\t\t\t<ForecastHour\n\t\t\t\t\tkey={`hourly-part-${i}`}\n\t\t\t\t\thours={weatherCounter}\n\t\t\t\t\tcolor={color}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport default function HourlyForecast(props) {\n\tconst forecastContainer = [];\n\tgenerateHourlyForecastBar(12, props.hourly.data, forecastContainer);\n\n\treturn (\n\t\t<div className=\"hourly-forecast-wrapper\">\n\t\t\t<span className=\"hourly-forecast-summary\">{props.hourly.summary}</span>\n\t\t\t<div className=\"hourly-forecast-bar\">{forecastContainer}</div>\n\t\t</div>\n\t);\n}\n\nHourlyForecast.propTypes = {\n\thourly: PropTypes.shape({\n\t\tsummary: PropTypes.string.isRequired,\n\t\tdata: PropTypes.arrayOf(\n\t\t\tPropTypes.shape({\n\t\t\t\ttime: PropTypes.number.isRequired,\n\t\t\t\ticon: PropTypes.string.isRequired,\n\t\t\t\ttemperature: PropTypes.number.isRequired\n\t\t\t})\n\t\t)\n\t}).isRequired\n};\n"]},"metadata":{},"sourceType":"module"}